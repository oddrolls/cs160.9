import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'weightedUniformStrings' function below.
     *
     * The function is expected to return a STRING_ARRAY.
     * The function accepts following parameters:
     *  1. STRING s
     *  2. INTEGER_ARRAY queries
     */

    public static List<String> weightedUniformStrings(String s, List<Integer> queries) {
    // Write your code here
         //easier than addng each letter individually
      String alpha = "abcdefghijklmnopqrstuvwxyz";
      HashMap<Character, Integer> alphavalues = new               HashMap<Character, Integer>();
      for (int i = 1; i < 27; i++){
        alphavalues.put(alpha.charAt(i - 1), i);
    }
    
      List<Integer> valuesinside = new ArrayList<Integer>();
      int consecutive = 1;
      char last_char = s.charAt(0);
      //start knowing first character
      for (int j = 1; j < s.length(); j++){
        //consecutive character, so do nothing but add to count
        if(last_char == s.charAt(j)){
            consecutive++;
            continue;
        }
        //if character is dif from last get value of letter from hashmap
        //add to list of values in s {(letter value) * m; m = 1 -> consecutive}
        int alpha_num = alphavalues.get(last_char);
        for (int m = 1; m <= consecutive; m++){
            valuesinside.add(alpha_num * m);
        }
        //reset for next consecutive bunch
        last_char = s.charAt(j);
        consecutive = 1;
    }
        //after going through entire string make sure you add the last consecutive bunch
      int alpha_num = alphavalues.get(last_char);
        for (int m = 1; m <= consecutive; m++){
            valuesinside.add(alpha_num * m);
        }
    //loop through each item in queries and check if in values_in_s
    List<String> ret = new ArrayList<String>();
    for (int q = 0; q < queries.size(); q++){
        if (valuesinside.contains(queries.get(q))){
            ret.add("Yes");
        }
        else{
            ret.add("No");
        }
    }
    return ret;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        String s = bufferedReader.readLine();

        int queriesCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<Integer> queries = IntStream.range(0, queriesCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine().replaceAll("\\s+$", "");
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .map(String::trim)
            .map(Integer::parseInt)
            .collect(toList());

        List<String> result = Result.weightedUniformStrings(s, queries);

        bufferedWriter.write(
            result.stream()
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}
